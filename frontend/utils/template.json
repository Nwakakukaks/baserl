{
  "marketplace": {
    "name": "Shop",
    "category": "🛒 E-commerce",
    "html": "\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', Arial, sans-serif; padding: 16px; }\n      .image-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; margin-bottom: 8px }\n      .image { width: 100%; height: 144px; object-fit: cover; border-radius: 4px; cursor: pointer; }\n      .label { color: black; font-size: 18px; margin-bottom: 4px; margin-top: 16px; }\n      .input { width: 100%;  border: 1px solid #d1d5db;\n        padding: 6px; margin-bottom: 10px; }\n      .button { margin-top: 12px; color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE; transition: background-color 0.3s; }\n      .loading { background: linear-gradient(to right, #3b82f6, white); animation: pulse 1s infinite; }\n      @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }\n    </style>\n    <div class=\"container\">\n      <div class=\"image-grid\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\" alt=\"NFT 1\" class=\"image\" onclick=\"selectNFT(0)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\" alt=\"NFT 2\" class=\"image\" onclick=\"selectNFT(1)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\" alt=\"NFT 3\" class=\"image\" onclick=\"selectNFT(2)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\" alt=\"NFT 4\" class=\"image\" onclick=\"selectNFT(3)\" />\n      </div>\n   \n      <label class=\"label\">Shipping address:</label>\n      <input id=\"buyerAddress\" type=\"text\" placeholder=\"Enter shipping address\" class=\"input\" />\n      <label class=\"label\">Phone:</label>\n      <input id=\"phoneContact\" type=\"tel\" placeholder=\"Enter phone number\" class=\"input\" />\n      <button id=\"purchaseButton\" onclick=\"handleNFT()\" class=\"button\">Checkout</button>\n    </div>\n",
    "js": "\n    const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n    const NFT_IMAGES = [\n      \"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\",\n      \"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\",\n      \"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\",\n      \"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\"\n    ];\n    const NFT_PRICES = [0.1, 0.2, 0.15, 0.25];\n    let selectedNFTIndex = -1;\n    let loading = false;\n    \n    const waitForEthereumWallet = async () => {\n      const wallet = await detectWallet();\n      if (wallet) {\n        return new ethers.providers.Web3Provider(wallet);\n      }\n      throw new Error('No Base-compatible wallet found');\n    };\n    \n    const checkTransactionStatus = async (hash, provider) => {\n      try {\n        const receipt = await provider.getTransactionReceipt(hash);\n        return receipt && receipt.status === 1;\n      } catch (error) {\n        console.error('Error checking transaction status:', error);\n        return false;\n      }\n    };\n    \n    const waitForTransaction = async (hash, provider, maxAttempts = 10) => {\n      let attempts = 0;\n      while (attempts < maxAttempts) {\n        const success = await checkTransactionStatus(hash, provider);\n        if (success) return true;\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        attempts++;\n      }\n      return false;\n    };\n    \n    function selectNFT(index) {\n      selectedNFTIndex = index;\n      document.getElementById('price').value = NFT_PRICES[index];\n    }\n    \n    async function handleNFT() {\n      if (selectedNFTIndex === -1) {\n        alert('Please select an Product first');\n        return;\n      }\n      \n      const buyerAddress = document.getElementById('buyerAddress').value;\n      const phoneContact = document.getElementById('phoneContact').value;\n      \n      if (!buyerAddress || !phoneContact) {\n        alert('Please enter both buyer address and phone contact');\n        return;\n      }\n      \n      if (loading) return;\n      \n      const purchaseButton = document.getElementById('purchaseButton');\n      loading = true;\n      purchaseButton.disabled = true;\n      purchaseButton.classList.add('loading');\n      purchaseButton.textContent = 'Processing...';\n      \n      try {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        \n        const tx = await signer.sendTransaction({\n          to: RECIPIENT,\n          value: ethers.utils.parseEther(NFT_PRICES[selectedNFTIndex].toString())\n        });\n        \n        const success = await waitForTransaction(tx.hash, provider);\n        if (success) {\n          purchaseButton.classList.remove('loading');\n          purchaseButton.textContent = 'Purchase Successful';\n          purchaseButton.style.backgroundColor = 'green';\n          console.log(`Product ${selectedNFTIndex} purchased by ${buyerAddress}. Contact: ${phoneContact}`);\n          setTimeout(() => {\n            purchaseButton.disabled = false;\n            purchaseButton.textContent = 'Check out';\n            purchaseButton.style.backgroundColor = '';\n            document.getElementById('price').value = '';\n            document.getElementById('buyerAddress').value = '';\n            document.getElementById('phoneContact').value = '';\n            selectedNFTIndex = -1;\n          }, 3000);\n        } else {\n          throw new Error('Transaction failed');\n        }\n      } catch (error) {\n        console.error('Purchase error:', error);\n        purchaseButton.classList.remove('loading');\n        purchaseButton.disabled = false;\n        purchaseButton.textContent = 'Check out';\n        alert('Transaction failed. Please try again.');\n      } finally {\n        loading = false;\n      }\n    }\n"
  },

  "payment": {
    "html": "\n    <style>\n@import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .payment-container {\n        background-color: white;\n        width: 320px;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', Arial, sans-serif;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .payment-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .service-select {\n        flex: 1;\n        background-color: transparent;\n        padding: 8px;\n        border: 1px solid #d1d5db;\n        outline: none;\n        color: black;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .payment-button {\n        margin-top: 12px;\n        color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .payment-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .payment-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"payment-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3QgJ0elMB4oh9KpZbJwuajRl6c2XWTSfEVm85\" alt=\"Payment Base\" class=\"payment-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Service Rendered:</label>\n          <select id=\"serviceType\" class=\"service-select\">\n            <option value=\"Gig Payment\">Gig Payment</option>\n            <option value=\"Tip\">Tip</option>\n          </select>\n          <label class=\"input-label\">Payment Fee:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib\" alt=\"ETH\" class=\"amount-input-icon\" />\n            <input id=\"paymentAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n          <button id=\"paymentButton\" class=\"payment-button\">Send Payment</button>\n        </div>\n      </div>\n    </div>\n",
    "js": "\n    (function() {\n      const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n      \n      const waitForEthereumWallet = async () => {\n        const wallet = await detectWallet();\n        if (wallet) {\n          return new ethers.providers.Web3Provider(wallet);\n        }\n        throw new Error('No Base-compatible wallet found');\n      };\n      \n      const checkTransactionStatus = async (hash, provider) => {\n        try {\n          const receipt = await provider.getTransactionReceipt(hash);\n          return receipt && receipt.status === 1;\n        } catch (error) {\n          console.error('Error checking transaction status:', error);\n          return false;\n        }\n      };\n      \n      const waitForTransaction = async (hash, provider, maxAttempts = 10) => {\n        let attempts = 0;\n        while (attempts < maxAttempts) {\n          const success = await checkTransactionStatus(hash, provider);\n          if (success) return true;\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          attempts++;\n        }\n        return false;\n      };\n      \n      const initializePayment = async () => {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        const serviceTypeSelect = document.getElementById('serviceType');\n        const paymentAmountInput = document.getElementById('paymentAmount');\n        const paymentButton = document.getElementById('paymentButton');\n        \n        let loading = false;\n        \n        const sendPayment = async (serviceType, amount) => {\n          try {\n            const tx = await signer.sendTransaction({\n              to: RECIPIENT,\n              value: ethers.utils.parseEther(amount.toString())\n            });\n            \n            const success = await waitForTransaction(tx.hash, provider);\n            return success;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handlePayment = async () => {\n          if (loading) return;\n          \n          const amount = Number(paymentAmountInput.value);\n          const serviceType = serviceTypeSelect.value;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          loading = true;\n          paymentButton.disabled = true;\n          paymentButton.classList.add('loading');\n          paymentButton.textContent = 'Paying...';\n          \n          try {\n            const success = await sendPayment(serviceType, amount);\n            \n            if (success) {\n              paymentButton.classList.remove('loading');\n              paymentButton.textContent = 'Payment Successful';\n              \n              setTimeout(() => {\n                paymentButton.classList.remove('loading');\n                paymentButton.disabled = false;\n                paymentButton.textContent = 'Send Payment';\n                paymentAmountInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Payment error:', error);\n            paymentButton.classList.remove('loading');\n            paymentButton.disabled = false;\n            paymentButton.textContent = 'Send Payment';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        paymentButton.addEventListener('click', handlePayment);\n      };\n      \n      initializePayment();\n    })();\n",
    "name": "Payment",
    "category": "💳 Finance"
  },

  "donation": {
    "html": "\n    <style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n      .donate-container {\n        background-color: white;\n        width: 320px;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', Arial, sans-serif;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .donate-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .donate-button {\n        margin-top: 12px;\n        color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .donate-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .donate-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      .predefined-amounts {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 8px;\n      }\n      .predefined-amount-button {\n        color: black;\n        font-weight: bold;\n        background-color: transparent;\n        padding: 4px 8px;\n        border-radius: 0.125rem;\n        border: 1px solid black;\n        flex: 1;\n        margin: 0 4px;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"donate-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3NcDS9MmqTwZLGavY36FuE8XmyPAoRIOJCQBK\" alt=\"Donate Background\" class=\"donate-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Donate to cause:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib\" alt=\"ETH\" class=\"amount-input-icon\" />\n            <input id=\"donationAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n          <button id=\"donateButton\" class=\"donate-button\">Donate ETH</button>\n          <div class=\"predefined-amounts\">\n            <button class=\"predefined-amount-button\" data-amount=\"0.01\">Donate 1</button>\n            <button class=\"predefined-amount-button\" data-amount=\"0.05\">Donate 5</button>\n            <button class=\"predefined-amount-button\" data-amount=\"0.1\">Donate 10</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
    "js": "\n    (function() {\n      const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n      \n      const waitForEthereumWallet = async () => {\n        const wallet = await detectWallet();\n        if (wallet) {\n          return new ethers.providers.Web3Provider(wallet);\n        }\n        throw new Error('No Base-compatible wallet found');\n      };\n      \n      const checkTransactionStatus = async (hash, provider) => {\n        try {\n          const receipt = await provider.getTransactionReceipt(hash);\n          return receipt && receipt.status === 1;\n        } catch (error) {\n          console.error('Error checking transaction status:', error);\n          return false;\n        }\n      };\n      \n      const waitForTransaction = async (hash, provider, maxAttempts = 10) => {\n        let attempts = 0;\n        while (attempts < maxAttempts) {\n          const success = await checkTransactionStatus(hash, provider);\n          if (success) return true;\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          attempts++;\n        }\n        return false;\n      };\n      \n      const initializeDonation = async () => {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        const donationAmountInput = document.getElementById('donationAmount');\n        const donateButton = document.getElementById('donateButton');\n        const predefinedButtons = document.querySelectorAll('.predefined-amount-button');\n        \n        let loading = false;\n        \n        const sendDonation = async (amount) => {\n          try {\n            const tx = await signer.sendTransaction({\n              to: RECIPIENT,\n              value: ethers.utils.parseEther(amount.toString())\n            });\n            \n            const success = await waitForTransaction(tx.hash, provider);\n            return success;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handleDonation = async (amount) => {\n          if (loading) return;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          loading = true;\n          donateButton.disabled = true;\n          donateButton.classList.add('loading');\n          donateButton.textContent = 'Donating...';\n          \n          try {\n            const success = await sendDonation(amount);\n            \n            if (success) {\n              donateButton.classList.remove('loading');\n              donateButton.textContent = 'Donation Successful';\n              \n              setTimeout(() => {\n                donateButton.classList.remove('loading');\n                donateButton.disabled = false;\n                donateButton.textContent = 'Donate ETH';\n                donationAmountInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Donation error:', error);\n            donateButton.classList.remove('loading');\n            donateButton.disabled = false;\n            donateButton.textContent = 'Donate ETH';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        donateButton.addEventListener('click', () => {\n          const amount = Number(donationAmountInput.value);\n          handleDonation(amount);\n        });\n        \n        predefinedButtons.forEach(button => {\n          button.addEventListener('click', () => {\n            const amount = Number(button.getAttribute('data-amount'));\n            donationAmountInput.value = amount;\n            handleDonation(amount);\n          });\n        });\n      };\n      \n      initializeDonation();\n    })();\n  ",
    "name": "Donate",
    "category": "🌍 Public Good"
  }
}
