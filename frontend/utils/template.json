{
  "marketplace": {
    "name": "Shop",
    "category": "🛒 E-commerce",
    "html": "\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', Arial, sans-serif; padding: 16px; }\n      .image-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; margin-bottom: 8px }\n      .image { width: 100%; height: 144px; object-fit: cover; border-radius: 4px; cursor: pointer; }\n      .label { color: black; font-size: 18px; margin-bottom: 4px; margin-top: 16px; }\n      .input { width: 100%;  border: 1px solid #d1d5db;\n        padding: 6px; margin-bottom: 10px; }\n      .button { margin-top: 12px; color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE; transition: background-color 0.3s; }\n      .loading { background: linear-gradient(to right, #3b82f6, white); animation: pulse 1s infinite; }\n      @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }\n    </style>\n    <div class=\"container\">\n      <div class=\"image-grid\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\" alt=\"NFT 1\" class=\"image\" onclick=\"selectNFT(0)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\" alt=\"NFT 2\" class=\"image\" onclick=\"selectNFT(1)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\" alt=\"NFT 3\" class=\"image\" onclick=\"selectNFT(2)\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\" alt=\"NFT 4\" class=\"image\" onclick=\"selectNFT(3)\" />\n      </div>\n   \n      <label class=\"label\">Shipping address:</label>\n      <input id=\"buyerAddress\" type=\"text\" placeholder=\"Enter shipping address\" class=\"input\" />\n      <label class=\"label\">Phone:</label>\n      <input id=\"phoneContact\" type=\"tel\" placeholder=\"Enter phone number\" class=\"input\" />\n      <button id=\"purchaseButton\" onclick=\"handleNFT()\" class=\"button\">Checkout</button>\n    </div>\n",
    "js": "\n    const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n    const BASE_CONTRACT = \"0x0466A29D90D95365E98FC477AD39D7c00E31Dc3C\";\n    const ABI = [\n      \"function payment(address payable addr) public payable\"\n    ];\n    const NFT_IMAGES = [\n      \"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\",\n      \"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\",\n      \"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\",\n      \"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\"\n    ];\n    const NFT_PRICES = [0.1, 0.2, 0.15, 0.25];\n    let selectedNFTIndex = -1;\n    let loading = false;\n    \n    const detectWallet = async () => {\n      if (window.ethereum) {\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n        if (chainId === '0x2105' || chainId === '0x14A34') { // Chain ID for Base mainnet (8453) or testnet (84532)\n          return window.ethereum;\n        } else {\n          console.log('Please connect to the Base network');\n          return null;\n        }\n      }\n      return null;\n    };\n    \n    const waitForEthereumWallet = async () => {\n      return new Promise((resolve) => {\n        const checkWallet = async () => {\n          const wallet = await detectWallet();\n          if (wallet) {\n            resolve(new ethers.providers.Web3Provider(wallet));\n          } else {\n            setTimeout(checkWallet, 100);\n          }\n        };\n        checkWallet();\n      });\n    };\n    \n    function selectNFT(index) {\n      selectedNFTIndex = index;\n    }\n    \n    async function handleNFT() {\n      if (selectedNFTIndex === -1) {\n        alert('Please select a Product first');\n        return;\n      }\n      \n      const buyerAddress = document.getElementById('buyerAddress').value;\n      const phoneContact = document.getElementById('phoneContact').value;\n      \n      if (!buyerAddress || !phoneContact) {\n        alert('Please enter both shipping address and phone contact');\n        return;\n      }\n      \n      if (loading) return;\n      \n      const purchaseButton = document.getElementById('purchaseButton');\n      loading = true;\n      purchaseButton.disabled = true;\n      purchaseButton.classList.add('loading');\n      purchaseButton.textContent = 'Processing...';\n      \n      try {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(BASE_CONTRACT, ABI, signer);\n        \n        const amount = NFT_PRICES[selectedNFTIndex];\n        const amountWei = ethers.utils.parseEther(amount.toString());\n        \n        const tx = await contract.payment(RECIPIENT, { value: amountWei });\n        await tx.wait();\n        \n        purchaseButton.classList.remove('loading');\n        purchaseButton.textContent = 'Purchase Successful';\n        purchaseButton.style.backgroundColor = 'green';\n        console.log(`Product ${selectedNFTIndex} purchased by ${buyerAddress}. Contact: ${phoneContact}`);\n        setTimeout(() => {\n          purchaseButton.disabled = false;\n          purchaseButton.textContent = 'Check out';\n          purchaseButton.style.backgroundColor = '';\n          document.getElementById('buyerAddress').value = '';\n          document.getElementById('phoneContact').value = '';\n          selectedNFTIndex = -1;\n        }, 3000);\n      } catch (error) {\n        console.error('Purchase error:', error);\n        purchaseButton.classList.remove('loading');\n        purchaseButton.disabled = false;\n        purchaseButton.textContent = 'Check out';\n        alert('Transaction failed. Please try again.');\n      } finally {\n        loading = false;\n      }\n    }\n"
  },

  "payment": {
    "html": "\n    <style>\n@import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .payment-container {\n        background-color: white;\n        width: 320px;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', Arial, sans-serif;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .payment-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .service-select {\n        flex: 1;\n        background-color: transparent;\n        padding: 8px;\n        border: 1px solid #d1d5db;\n        outline: none;\n        color: black;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .recipient-input {\n        flex: 1;\n        background-color: transparent;\n        padding: 8px;\n        border: 1px solid #d1d5db;\n        outline: none;\n        color: black;\n      }\n      .payment-button {\n        margin-top: 12px;\n        color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .payment-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .payment-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"payment-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3QgJ0elMB4oh9KpZbJwuajRl6c2XWTSfEVm85\" alt=\"Payment Base\" class=\"payment-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Service Rendered:</label>\n          <select id=\"serviceType\" class=\"service-select\">\n            <option value=\"Gig Payment\">Gig Payment</option>\n            <option value=\"Tip\">Tip</option>\n          </select>\n          <label class=\"input-label\">Payment Fee:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib\" alt=\"ETH\" class=\"amount-input-icon\" />\n            <input id=\"paymentAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n         \n          <button id=\"paymentButton\" class=\"payment-button\">Send Payment</button>\n        </div>\n      </div>\n    </div>\n",
    "js": "\n    (function() {\n const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n\n      const BASE_CONTRACT = \"0x0466A29D90D95365E98FC477AD39D7c00E31Dc3C\";\n      const ABI = [\n        \"function payment(address payable addr) public payable\",\n        \"function donate(address payable addr) public payable\"\n      ];\n      \n      const detectWallet = async () => {\n        if (window.ethereum) {\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          if (chainId === '0x2105' || chainId === '0x14A34') { // Chain ID for Base mainnet (8453) or testnet (84532)\n            return window.ethereum;\n          } else {\n            console.log('Please connect to the Base network');\n            return null;\n          }\n        }\n        return null;\n      };\n      \n      const waitForEthereumWallet = async () => {\n        return new Promise((resolve) => {\n          const checkWallet = async () => {\n            const wallet = await detectWallet();\n            if (wallet) {\n              resolve(new ethers.providers.Web3Provider(wallet));\n            } else {\n              setTimeout(checkWallet, 100);\n            }\n          };\n          checkWallet();\n        });\n      };\n      \n      const initializePayment = async () => {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(BASE_CONTRACT, ABI, signer);\n        \n        const serviceTypeSelect = document.getElementById('serviceType');\n        const paymentAmountInput = document.getElementById('paymentAmount');\n        \n        const paymentButton = document.getElementById('paymentButton');\n        \n        let loading = false;\n        \n        const sendPayment = async (serviceType, amount, recipientAddress) => {\n          try {\n            const amountWei = ethers.utils.parseEther(amount.toString());\n            let tx;\n            if (serviceType === 'Gig Payment') {\n              tx = await contract.payment(recipientAddress, { value: amountWei });\n            } else { // Tip\n              tx = await contract.payment(recipientAddress, { value: amountWei });\n            }\n            await tx.wait();\n            return true;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handlePayment = async () => {\n          if (loading) return;\n          \n          const amount = Number(paymentAmountInput.value);\n          const serviceType = serviceTypeSelect.value;\n          const recipientAddress = RECIPIENT;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          if (!ethers.utils.isAddress(recipientAddress)) {\n            alert('Please enter a valid recipient address');\n            return;\n          }\n          \n          loading = true;\n          paymentButton.disabled = true;\n          paymentButton.classList.add('loading');\n          paymentButton.textContent = 'Paying...';\n          \n          try {\n            const success = await sendPayment(serviceType, amount, recipientAddress);\n            \n            if (success) {\n              paymentButton.classList.remove('loading');\n              paymentButton.textContent = 'Payment Successful';\n              \n              setTimeout(() => {\n                paymentButton.classList.remove('loading');\n                paymentButton.disabled = false;\n                paymentButton.textContent = 'Send Payment';\n                paymentAmountInput.value = '';\n                recipientAddressInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Payment error:', error);\n            paymentButton.classList.remove('loading');\n            paymentButton.disabled = false;\n            paymentButton.textContent = 'Send Payment';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        paymentButton.addEventListener('click', handlePayment);\n      };\n      \n      initializePayment();\n    })();\n",
    "name": "Payment",
    "category": "💳 Finance"
  },

  "donation": {
    "html": "\n    <style>\n      @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .donate-container {\n        background-color: white;\n        width: 320px;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', Arial, sans-serif;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .donate-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .donate-button {\n        margin-top: 12px;\n        color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1F75FE;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .donate-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .donate-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      .predefined-amounts {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 8px;\n      }\n      .predefined-amount-button {\n        color: black;\n        font-weight: bold;\n        background-color: transparent;\n        padding: 4px 8px;\n        border-radius: 0.125rem;\n        border: 1px solid black;\n        flex: 1;\n        margin: 0 4px;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"donate-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3NcDS9MmqTwZLGavY36FuE8XmyPAoRIOJCQBK\" alt=\"Donate Background\" class=\"donate-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Donate to cause:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib\" alt=\"ETH\" class=\"amount-input-icon\" />\n            <input id=\"donationAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n          <button id=\"donateButton\" class=\"donate-button\">Donate ETH</button>\n          <div class=\"predefined-amounts\">\n            <button class=\"predefined-amount-button\" data-amount=\"0.01\">Donate 0.01</button>\n            <button class=\"predefined-amount-button\" data-amount=\"0.05\">Donate 0.05</button>\n            <button class=\"predefined-amount-button\" data-amount=\"0.1\">Donate 0.1</button>\n          </div>\n        </div>\n      </div>\n    </div>\n",
    "js": "\n    (function() {\n      const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n      const BASE_CONTRACT = \"0x0466A29D90D95365E98FC477AD39D7c00E31Dc3C\";\n      const ABI = [\n        \"function donate(address payable addr) public payable\"\n      ];\n      \n      const detectWallet = async () => {\n        if (window.ethereum) {\n          const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n          if (chainId === '0x2105' || chainId === '0x14A34') { // Chain ID for Base mainnet (8453) or testnet (84532)\n            return window.ethereum;\n          } else {\n            console.log('Please connect to the Base network');\n            return null;\n          }\n        }\n        return null;\n      };\n      \n      const waitForEthereumWallet = async () => {\n        return new Promise((resolve) => {\n          const checkWallet = async () => {\n            const wallet = await detectWallet();\n            if (wallet) {\n              resolve(new ethers.providers.Web3Provider(wallet));\n            } else {\n              setTimeout(checkWallet, 100);\n            }\n          };\n          checkWallet();\n        });\n      };\n      \n      const initializeDonation = async () => {\n        const provider = await waitForEthereumWallet();\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(BASE_CONTRACT, ABI, signer);\n        \n        const donationAmountInput = document.getElementById('donationAmount');\n        const donateButton = document.getElementById('donateButton');\n        const predefinedButtons = document.querySelectorAll('.predefined-amount-button');\n        \n        let loading = false;\n        \n        const sendDonation = async (amount) => {\n          try {\n            const amountWei = ethers.utils.parseEther(amount.toString());\n            const tx = await contract.donate(RECIPIENT, { value: amountWei });\n            await tx.wait();\n            return true;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handleDonation = async (amount) => {\n          if (loading) return;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          loading = true;\n          donateButton.disabled = true;\n          donateButton.classList.add('loading');\n          donateButton.textContent = 'Donating...';\n          \n          try {\n            const success = await sendDonation(amount);\n            \n            if (success) {\n              donateButton.classList.remove('loading');\n              donateButton.textContent = 'Donation Successful';\n              \n              setTimeout(() => {\n                donateButton.classList.remove('loading');\n                donateButton.disabled = false;\n                donateButton.textContent = 'Donate ETH';\n                donationAmountInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Donation error:', error);\n            donateButton.classList.remove('loading');\n            donateButton.disabled = false;\n            donateButton.textContent = 'Donate ETH';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        donateButton.addEventListener('click', () => {\n          const amount = Number(donationAmountInput.value);\n          handleDonation(amount);\n        });\n        \n        predefinedButtons.forEach(button => {\n          button.addEventListener('click', () => {\n            const amount = Number(button.getAttribute('data-amount'));\n            donationAmountInput.value = amount;\n            handleDonation(amount);\n          });\n        });\n      };\n      \n      initializeDonation();\n    })();\n",
    "name": "Donate",
    "category": "🌍 Public Good"
  },

 "portfolio": {
  "name": " Portfolio",
  "category": "👤 Personal",
  "html": "\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', Arial, sans-serif; padding: 16px; }\n      .profile-section { display: flex; flex-direction: column; align-items: center; margin-bottom: 16px; }\n      .profile-image { width: 80px; height: 80px; border-radius: 50%; object-fit: cover; border: none; margin-bottom: 10px; }\n      .profile-name { font-size: 18px; font-weight: 600; margin-bottom: 8px; }\n      .profile-bio { text-align: center; color: #666; margin-bottom: 16px; font-size: 13px; max-width: 80%; }\n      .social-links { display: flex; gap: 16px; margin-bottom: 16px; }\n      .social-link { display: flex; align-items: center; justify-content: center; width: 40px; height: 40px; border-radius: 50%; background-color: #f3f4f6; color: #1F75FE; transition: all 0.2s ease; }\n      .social-link:hover { background-color: #1F75FE; color: white; }\n      .section-title { font-size: 20px; font-weight: 600; margin-bottom: 16px; text-align: center; }\n      .portfolio-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px; }\n      .portfolio-item { position: relative; aspect-ratio: 1; overflow: hidden; border-radius: 8px; cursor: pointer; }\n      .portfolio-image { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }\n      .portfolio-item:hover .portfolio-image { transform: scale(1.05); }\n      .portfolio-overlay { position: absolute; bottom: 0; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.7)); padding: 12px; color: white; font-size: 14px; }\n      .price-tag { position: absolute; top: 12px; right: 12px; background: rgba(31, 117, 254, 0.9); color: white; padding: 4px 8px; border-radius: 4px; font-size: 14px; }\n      .button { margin-top: 12px; color: white; font-size: 18px; font-weight: 600; padding: 4px 12px; border-radius: 0.125rem; width: 100%; border: 1px solid black; background-color: #1F75FE; transition: all 0.3s; cursor: pointer; }\n      .button:hover { background-color: #1b62d1; }\n      .loading { background: linear-gradient(to right, #3b82f6, #1F75FE); animation: pulse 1s infinite; }\n      @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }\n    </style>\n    <div class=\"container\">\n      <div class=\"profile-section\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3iS1sSBQCJO38NcHlzUmSsbgKxnkEpThFroXI\" alt=\"Profile\" class=\"profile-image\">\n        <h1 class=\"profile-name\">Creative Name</h1>\n        <p class=\"profile-bio\">Digital Artist & Creator based in New York. Specializing in contemporary digital art and NFTs.</p>\n        <div class=\"social-links\">\n          <a href=\"https://twitter.com/your-handle\" class=\"social-link\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"></path></svg>\n          </a>\n          <a href=\"https://instagram.com/your-handle\" class=\"social-link\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><rect width=\"20\" height=\"20\" x=\"2\" y=\"2\" rx=\"5\" ry=\"5\"></rect><path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path><line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line></svg>\n          </a>\n          <a href=\"https://dribbble.com/your-handle\" class=\"social-link\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 19l7-7 3 3-7 7-3-3z\"></path><path d=\"M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z\"></path><path d=\"M2 2l7.586 7.586\"></path><circle cx=\"11\" cy=\"11\" r=\"2\"></circle></svg>\n          </a>\n        </div>\n      </div>\n      <h2 class=\"section-title\">My Works</h2>\n      <div class=\"portfolio-grid\">\n        <div class=\"portfolio-item\" onclick=\"selectWork(0)\">\n          \n          <img src=\"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\" alt=\"Digital Dreams #1\" class=\"portfolio-image\">\n          <div class=\"portfolio-overlay\">Digital Dreams #1</div>\n        </div>\n        <div class=\"portfolio-item\" onclick=\"selectWork(1)\">\n         \n          <img src=\"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\" alt=\"Neon Nights #2\" class=\"portfolio-image\">\n          <div class=\"portfolio-overlay\">Dancing Worshipper #2</div>\n        </div>\n\n<div class=\"portfolio-item\" onclick=\"selectWork(2)\">\n          \n          <img src=\"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\" alt=\"Digital Dreams #1\" class=\"portfolio-image\">\n          <div class=\"portfolio-overlay\">Fly Angel #3</div>\n        </div>\n        <div class=\"portfolio-item\" onclick=\"selectWork(3)\">\n         \n          <img src=\"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\" alt=\"Neon Nights #2\" class=\"portfolio-image\">\n          <div class=\"portfolio-overlay\">Neon Nights #4</div>\n        </div>\n       \n       \n       \n      </div>\n      <div style=\"margin-top: 24px;\">\n        <button onclick=\"handleSchedule()\" class=\"button\">Let's make magic happen ✨</button>\n      </div>\n    </div>\n",
  "js": "\nconst LINK = \"your contact link\";\n    \nconst PORTFOLIO_CONFIG = {\n  profile: {\n    name: 'Creative Name',\n    bio: 'Digital Artist & Creator based in New York. Specializing in contemporary digital art and NFTs.',\n    image: '/api/placeholder/120/120',\n    calendlyLink: 'https://calendly.com/your-link'\n  },\n  socialLinks: [\n    {\n      platform: 'twitter',\n      url: 'https://twitter.com/your-handle',\n      icon: '<svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"></path></svg>'\n    },\n    {\n      platform: 'instagram',\n      url: 'https://instagram.com/your-handle',\n      icon: '<svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><rect width=\"20\" height=\"20\" x=\"2\" y=\"2\" rx=\"5\" ry=\"5\"></rect><path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path><line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line></svg>'\n    },\n    {\n      platform: 'dribbble',\n      url: 'https://dribbble.com/your-handle',\n      icon: '<svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path d=\"M12 19l7-7 3 3-7 7-3-3z\"></path><path d=\"M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z\"></path><path d=\"M2 2l7.586 7.586\"></path><circle cx=\"11\" cy=\"11\" r=\"2\"></circle></svg>'\n    }\n  ],\n  works: [\n    { \n      title: 'Digital Dreams #1',\n      image: '/api/placeholder/300/300',\n      price: '0.1 ETH'\n    },\n    { \n      title: 'Neon Nights #2',\n      image: '/api/placeholder/300/300',\n      price: '0.2 ETH'\n    },\n    { \n      title: 'Abstract Flow #3',\n      image: '/api/placeholder/300/300',\n      price: '0.15 ETH'\n    },\n    { \n      title: 'Cyber Punk #4',\n      image: '/api/placeholder/300/300',\n      price: '0.25 ETH'\n    }\n  ]\n};\n\n\nfunction initializePortfolio() {\n \n  document.getElementById('profileImage').src = PORTFOLIO_CONFIG.profile.image;\n  document.getElementById('profileName').textContent = PORTFOLIO_CONFIG.profile.name;\n  document.getElementById('profileBio').textContent = PORTFOLIO_CONFIG.profile.bio;\n\n \n  const socialLinksContainer = document.getElementById('socialLinks');\n  PORTFOLIO_CONFIG.socialLinks.forEach(link => {\n    const anchor = document.createElement('a');\n    anchor.href = link.url;\n    anchor.className = 'social-link';\n    anchor.innerHTML = link.icon;\n    socialLinksContainer.appendChild(anchor);\n  });\n\n\n  const portfolioGrid = document.getElementById('portfolioGrid');\n  PORTFOLIO_CONFIG.works.forEach(work => {\n    const div = document.createElement('div');\n    div.className = 'portfolio-item';\n    div.innerHTML = `\n      <img src=\"${work.image}\" alt=\"${work.title}\" class=\"portfolio-image\">\n      <div class=\"portfolio-overlay\">${work.title}</div>\n      <div class=\"price-tag\">${work.price}</div>\n    `;\n    portfolioGrid.appendChild(div);\n  });\n}\n\nfunction handleSchedule() {\n  window.open(PORTFOLIO_CONFIG.profile.calendlyLink, '_blank');\n}\n\n\ndocument.addEventListener('DOMContentLoaded', initializePortfolio);\n"
},

"review": {
  "name": "Review",
  "category": "🌟 Marketing",
  "html": "\n    <style>\n    @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');\n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', Arial, sans-serif; padding: 16px; }\n      .profile-section { display: flex; flex-direction: column; align-items: center; margin-bottom: 16px; }\n      .profile-image { width: 80px; height: 80px; border-radius: 50%; object-fit: cover; border: none; margin-bottom: 10px; }\n      .profile-name { font-size: 18px; font-weight: 600; margin-bottom: 8px; }\n      .profile-bio { text-align: center; color: #666; margin-bottom: 16px; font-size: 13px; max-width: 80%; }\n      .section-title { font-size: 20px; font-weight: 600; margin-bottom: 16px; text-align: center; }\n      .input-field { width: 100%; padding: 8px; margin-bottom: 12px; border: 1px solid #ccc; border-radius: 4px; }\n      .star-rating { display: flex; justify-content: center; margin-bottom: 12px; }\n      .star { font-size: 24px; color: #ccc; cursor: pointer; transition: color 0.2s; }\n      .star.active { color: #FFD700; }\n      .button { margin-top: 12px; color: white; font-size: 18px; font-weight: 600; padding: 4px 12px; border-radius: 0.125rem; width: 100%; border: 1px solid black; background-color: #1F75FE; transition: all 0.3s; cursor: pointer; }\n      .button:hover { background-color: #1b62d1; }\n      .button.sending { background-color: #ccc; cursor: not-allowed; }\n      .button.sent { background-color: #4CAF50; }\n      .wall-of-love { text-align: center; margin-top: 20px; }\n      .wall-of-love a { color: #1F75FE; text-decoration: none; font-weight: 600; }\n      .wall-of-love a:hover { text-decoration: underline; }\n    </style>\n    <div class=\"container\">\n      <div class=\"profile-section\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib\" alt=\"Profile\" class=\"profile-image\" id=\"profileImage\">\n        <h1 class=\"profile-name\" id=\"profileName\">Base Africa</h1>\n        <p class=\"profile-bio\" id=\"profileBio\">We value your feedback. Please leave a review about your experience in the build-athon!</p>\n      </div>\n      <h2 class=\"section-title\">Leave a Review</h2>\n      <input type=\"text\" id=\"userName\" class=\"input-field\" placeholder=\"Your Name\">\n  \n      <textarea id=\"reviewMessage\" class=\"input-field\" rows=\"4\" placeholder=\"Your Review\"></textarea>\n      <button onclick=\"submitReview()\" class=\"button\" id=\"submitButton\">Send Review</button>\n      <div class=\"wall-of-love\">\n        <a href=\"#\" id=\"wallOfLoveLink\">Wall of Love</a>\n      </div>\n    </div>\n",
  "js": "\nconst LINK = \"your-wall-of-love-link\";\n\nconst CONFIG = {\n  profile: {\n    name: 'Company Name',\n    bio: 'We value your feedback. Please leave a review!',\n    image: 'https://utfs.io/f/PKy8oE1GN2J3ZEUBF4wUzG1X0RVlBmCr9skoSt6LHMuAEQib',\n    wallOfLoveLink: 'https://example.com/wall-of-love'\n  }\n};\n\nfunction initializeTemplate() {\n  document.getElementById('profileImage').src = CONFIG.profile.image;\n  document.getElementById('profileName').textContent = CONFIG.profile.name;\n  document.getElementById('profileBio').textContent = CONFIG.profile.bio;\n  document.getElementById('wallOfLoveLink').href = CONFIG.profile.wallOfLoveLink;\n\n  const stars = document.querySelectorAll('.star');\n  stars.forEach(star => {\n    star.addEventListener('click', setRating);\n  });\n}\n\nlet currentRating = 0;\n\nfunction setRating(e) {\n  const rating = e.target.getAttribute('data-rating');\n  currentRating = rating;\n  updateStars();\n}\n\nfunction updateStars() {\n  const stars = document.querySelectorAll('.star');\n  stars.forEach(star => {\n    star.classList.toggle('active', star.getAttribute('data-rating') <= currentRating);\n  });\n}\n\nfunction submitReview() {\n  const userName = document.getElementById('userName').value;\n  const reviewMessage = document.getElementById('reviewMessage').value;\n  const submitButton = document.getElementById('submitButton');\n  \n  if (!userName || !reviewMessage || currentRating === 0) {\n    alert('Please fill in all fields and select a rating.');\n    return;\n  }\n\n  // Disable button and show sending state\n  submitButton.disabled = true;\n  submitButton.classList.add('sending');\n  submitButton.textContent = 'Sending...';\n\n  // Simulate sending data to server\n  setTimeout(() => {\n    // Here you would typically send this data to your server\n    console.log('Review submitted:', { userName, reviewMessage, rating: currentRating });\n    \n    // Show sent state\n    submitButton.classList.remove('sending');\n    submitButton.classList.add('sent');\n    submitButton.textContent = 'Thank you for your review!';\n\n    // Clear the form\n    document.getElementById('userName').value = '';\n    document.getElementById('reviewMessage').value = '';\n    currentRating = 0;\n    updateStars();\n\n    // Reset button after 3 seconds\n    setTimeout(() => {\n      submitButton.disabled = false;\n      submitButton.classList.remove('sent');\n      submitButton.textContent = 'Send Review';\n    }, 3000);\n  }, 1500); // Simulate network delay\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeTemplate);\n"
},

"polls": {
  "name": "Polls",
  "category": "🌐 DAO",
  "html": "<style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n.voting-container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', Arial, sans-serif;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\n}\n.content-wrapper {\npadding: 16px;\n}\n.voting-image {\nwidth: 100%;\nheight: auto;\nmax-height: 176px;\nobject-fit: contain;\nmargin-bottom: 16px;\nborder-radius: 0.125rem;\n}\n.form-container {\npadding: 12px 4px;\ndisplay: flex;\nflex-direction: column;\nmargin-top: 12px;\n}\n.input-label {\ncolor: black;\nfont-weight: 600;\nfont-size: 18px;\nmargin-top: 4px;\n}\n.candidate-list {\nmargin-top: 12px;\n}\n.candidate-item {\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 8px;\npadding: 8px;\nborder: 1px solid #d1d5db;\n}\n.voting-button {\nmargin-top: 12px;\ncolor: white;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\ncursor: pointer;\nbackground-color: #1DA1F2;\n}\n\n.declare-button {\nmargin-top: 12px;\ncolor: black;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\ncursor: pointer;\nbackground-color: transparent;\n}\n\n.voting-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.voting-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n\n.declare-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n\n\n@keyframes pulse {\n0% {\nbackground-position: 0% 50%;\n}\n50% {\nbackground-position: 100% 50%;\n}\n100% {\nbackground-position: 0% 50%;\n}\n}\n.timer {\ntext-align: center;\nmargin-top: 16px;\nfont-size: 18px;\nfont-weight: 600;\n}\n</style>\n<div class=\"voting-container\">\n<div class=\"content-wrapper\">\n<img src=\"https://utfs.io/f/PKy8oE1GN2J3cXPyS4JnrjPmytFlpWZ2Y3gkRdK087boqXfG\" alt=\"Voting\" class=\"voting-image\" />\n<div class=\"form-container\">\n<label class=\"input-label\">Vote for a candidate:</label>\n<div id=\"candidateList\" class=\"candidate-list\"></div>\n<button id=\"voteButton\" class=\"voting-button\">Vote</button>\n<button id=\"declareWinnerButton\" class=\"declare-button\">Declare Winner</button>\n</div>\n<div id=\"timer\" class=\"timer\"></div>\n</div>\n</div>",
  "js": "(function() {\nconst contractAddress = \"0x0466A29D90D95365E98FC477AD39D7c00E31Dc3C\";\nconst contractABI = []; // Add your contract ABI here\nconst name = \"Voting\";\nconst creator = \"0x2\";\n\nlet candidates = [];\nlet scores = [];\nlet timer = 300;\nlet isInitialized = false;\n\nconst waitForWeb3 = () => {\nreturn new Promise((resolve) => {\nconst checkWeb3 = () => {\nif (window.ethereum) {\nresolve(new Web3(window.ethereum));\n} else {\nsetTimeout(checkWeb3, 100);\n}\n};\ncheckWeb3();\n});\n};\n\nconst showError = (message) => {\nalert(message);\n};\n\nconst checkTransactionStatus = async (hash, web3) => {\ntry {\nconst receipt = await web3.eth.getTransactionReceipt(hash);\nreturn receipt && receipt.status;\n} catch (error) {\nconsole.error('Error checking transaction status:', error);\nreturn false;\n}\n};\n\nconst waitForTransaction = async (hash, web3, maxAttempts = 10) => {\nfor (let i = 0; i < maxAttempts; i++) {\nconst success = await checkTransactionStatus(hash, web3);\nif (success) return true;\nawait new Promise(resolve => setTimeout(resolve, 1000));\n}\nreturn false;\n};\n\nconst fetchScores = async (web3) => {\ntry {\nconst contract = new web3.eth.Contract(contractABI, contractAddress);\nconst result = await contract.methods.viewCurrentScores(creator).call();\nreturn result;\n} catch (error) {\nconsole.error('Error fetching scores:', error);\nshowError('Failed to fetch current scores');\nreturn null;\n}\n};\n\nconst updateCandidatesAndScores = async (web3) => {\nconst result = await fetchScores(web3);\nif (result && Array.isArray(result) && result.length === 2) {\ncandidates = result[0];\nscores = result[1].map(score => parseInt(score));\nrenderCandidates();\n}\n};\n\nconst renderCandidates = () => {\nconst candidateList = document.getElementById('candidateList');\nif (!candidateList) return;\n\ncandidateList.innerHTML = '';\ncandidates.forEach((candidate, index) => {\nconst candidateItem = document.createElement('div');\ncandidateItem.className = 'candidate-item';\ncandidateItem.innerHTML = `<span>${candidate}</span><span>${scores[index]} votes</span>`;\ncandidateList.appendChild(candidateItem);\n});\n};\n\nconst updateTimer = () => {\nconst timerElement = document.getElementById('timer');\nif (!timerElement) return;\ntimerElement.textContent = `Time remaining: ${formatTime(timer)}`;\n};\n\nconst formatTime = (time) => {\nconst minutes = Math.floor(time / 60);\nconst seconds = time % 60;\nreturn `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nconst handleVote = async (selectedCandidate, web3) => {\nconst voteButton = document.getElementById('voteButton');\nif (!voteButton) return;\n\ntry {\nconst accounts = await web3.eth.getAccounts();\nconst account = accounts[0];\n\nconst contract = new web3.eth.Contract(contractABI, contractAddress);\n\nvoteButton.disabled = true;\nvoteButton.classList.add('loading');\nvoteButton.textContent = 'Voting...';\n\nconst gas = await contract.methods.vote(selectedCandidate, creator).estimateGas({ from: account });\nconst transaction = await contract.methods.vote(selectedCandidate, creator).send({ from: account, gas });\n\nconst success = await waitForTransaction(transaction.transactionHash, web3);\n\nif (success) {\nvoteButton.textContent = 'Vote Successful';\nawait updateCandidatesAndScores(web3);\n\nsetTimeout(() => {\nvoteButton.classList.remove('loading');\nvoteButton.disabled = false;\nvoteButton.textContent = 'Vote';\n}, 3000);\n} else {\nthrow new Error('Vote failed');\n}\n} catch (error) {\nconsole.error('Voting error:', error);\nvoteButton.classList.remove('loading');\nvoteButton.disabled = false;\nvoteButton.textContent = 'Vote';\nshowError('Vote failed. Please try again.');\n}\n};\n\nconst handleDeclareWinner = async (web3) => {\nconst declareButton = document.getElementById('declareWinnerButton');\nif (!declareButton) return;\n\nif (timer > 0) {\nshowError('Voting is still in progress');\nreturn;\n}\n\ntry {\nconst accounts = await web3.eth.getAccounts();\nconst account = accounts[0];\n\nconst contract = new web3.eth.Contract(contractABI, contractAddress);\n\ndeclareButton.disabled = true;\ndeclareButton.classList.add('loading');\ndeclareButton.textContent = 'Declaring...';\n\nconst gas = await contract.methods.declareWinner(creator).estimateGas({ from: account });\nconst transaction = await contract.methods.declareWinner(creator).send({ from: account, gas });\n\nconst success = await waitForTransaction(transaction.transactionHash, web3);\n\nif (success) {\nconst winnerIndex = scores.indexOf(Math.max(...scores));\nshowError(`Winner: ${candidates[winnerIndex]} with ${scores[winnerIndex]} votes!`);\n\nsetTimeout(() => {\ndeclareButton.classList.remove('loading');\ndeclareButton.disabled = false;\ndeclareButton.textContent = 'Declare Winner';\n}, 3000);\n} else {\nthrow new Error('Failed to declare winner');\n}\n} catch (error) {\nconsole.error('Error declaring winner:', error);\ndeclareButton.classList.remove('loading');\ndeclareButton.disabled = false;\ndeclareButton.textContent = 'Declare Winner';\nshowError('Failed to declare winner');\n}\n};\n\nconst initializeVoting = async () => {\nconst web3 = await waitForWeb3();\nconst voteButton = document.getElementById('voteButton');\nconst declareButton = document.getElementById('declareWinnerButton');\n\nif (voteButton) {\nvoteButton.addEventListener('click', () => {\nconst selectedCandidate = prompt(`Enter the candidate name to vote (options: ${candidates.join(', ')}):`); \nif (!selectedCandidate) return;\n\nif (!candidates.includes(selectedCandidate)) {\nshowError('Invalid option selected');\nreturn;\n}\n\nhandleVote(selectedCandidate, web3);\n});\n}\n\nif (declareButton) {\ndeclareButton.addEventListener('click', () => handleDeclareWinner(web3));\n}\n\nawait updateCandidatesAndScores(web3);\n\nsetInterval(() => {\nif (timer > 0) {\ntimer--;\nupdateTimer();\n}\n}, 1000);\n};\n\ninitializeVoting().catch(error => {\nconsole.error('Failed to initialize voting:', error);\nshowError('Failed to initialize voting system');\n});\n})()"
}
}
